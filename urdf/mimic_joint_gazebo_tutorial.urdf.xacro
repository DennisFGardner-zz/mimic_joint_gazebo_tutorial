<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro"
  name="mimic_joint_gazebo_tutorial">

  <!-- - - - - - - - - - - Conventions - - - - - - - - - - -->

  <!-- length is front to back (x-axis) -->
  <!-- width goes left to right (y-axis) -->
  <!-- height is up down (z-axis) --> 

  <!-- reflection convention -->
  <!-- 
  front +1 
  back  -1 
  left  +1 
  right -1 
  -->


  <!-- - - - - - - - - - - Parameters - - - - - - - - - - -->

  <xacro:property name="bar_upper_limit" value="${pi/4}"/>
  <xacro:property name="bar_lower_limit" value="0"/>
  <xacro:property name="bar_effort" value="1000000"/>
  <xacro:property name="bar_velocity" value="100"/>


  <!-- - - - - - - - - - - Measurements - - - - - - - - - - -->

  <!-- body -->
  <xacro:property name="body_length" value="2"/>
  <xacro:property name="body_width" value="3"/>
  <xacro:property name="body_height" value="5"/>
  <xacro:property name="body_mass" value="5"/>


  <xacro:property name="bar_length" value="1"/>
  <xacro:property name="bar_radius" value="0.1"/>
  <xacro:property name="bar_mass" value="0.5"/>

  <!-- - - - - - - - - - - Inertia Macros - - - - - - - - - - -->
  
  <!-- Null -->
  <xacro:macro name="null_inertial">
    <inertial>
      <mass value="0.001"/>
      <inertia ixx="0.00001" ixy="0" ixz="0" iyy="0.00001" iyz="0" izz="0.00001"/>
    </inertial>
  </xacro:macro>
  
  <!-- solid cuboid -->
  <xacro:macro name="solid_cuboid_inertial"
               params="length width height mass *origin">
    <inertial>
      <xacro:insert_block name="origin"/>
      <mass value="${mass}"/>
      <inertia ixx="${mass * (width * width + height * height) / 12}"
               ixy="0" ixz="0"
               iyy="${mass * (length * length + height * height) / 12}"
               iyz="0"
               izz="${mass * (length * length + width * width) / 12}"/>
    </inertial>
  </xacro:macro>
  
  <!-- thick-walled cylindrical tube with open ends -->
  <xacro:macro name="thick_walled_tube_inertial"
               params="inner_rad outer_rad height mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               ixy="0" ixz="0"
               iyy="${(1 / 12) * mass * (3 * (inner_rad * inner_rad +
                    outer_rad * outer_rad) + height * height)}"
               iyz="0"
               izz="${mass * (inner_rad * inner_rad +
                    outer_rad * outer_rad) / 2}"/>
    </inertial>
  </xacro:macro>

  <!-- - - - - - - - - - - colors - - - - - - - - - - -->

  <xacro:property name="material_yellow">
    <material name="yellow">
      <color rgba="${255/255} ${226/255} ${0/255} 1"/>
    </material>
  </xacro:property>

  <xacro:property name="material_green">
    <material name="green">
      <color rgba="0 1 0 1"/>
    </material>
  </xacro:property>

  <xacro:property name="material_red">
    <material name="red">
      <color rgba="1 0 0 1"/>
    </material>
  </xacro:property>

  <xacro:macro name="mimic_joint_plugin_gazebo" params="name_prefix parent_joint mimic_joint has_pid:=false multiplier:=1.0 offset:=0 sensitiveness:=0.0 max_effort:=1.0 robot_namespace:=''">
    <gazebo>
      <plugin name="${name_prefix}mimic_joint_plugin" filename="libroboticsgroup_gazebo_mimic_joint_plugin.so">
        <joint>${parent_joint}</joint>
        <mimicJoint>${mimic_joint}</mimicJoint>
        <xacro:if value="${has_pid}">                     <!-- if set to true, PID parameters from "/gazebo_ros_control/pid_gains/${mimic_joint}" are loaded -->
          <hasPID />
        </xacro:if>
        <multiplier>${multiplier}</multiplier>
        <offset>${offset}</offset>
        <sensitiveness>${sensitiveness}</sensitiveness>   <!-- if absolute difference between setpoint and process value is below this threshold, do nothing; 0.0 = disable [rad] -->
        <maxEffort>${max_effort}</maxEffort>              <!-- only taken into account if has_pid:=true [Nm] -->
        <xacro:unless value="${robot_namespace == ''}">
          <robotNamespace>($robot_namespace)</robotNamespace>
        </xacro:unless>
      </plugin>
    </gazebo>
  </xacro:macro>

  <xacro:macro name="controller_plugin_gazebo" params="robot_namespace:=''">
    <gazebo>
      <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
        <xacro:unless value="${robot_namespace == ''}">
          <robotNamespace>($robot_namespace)</robotNamespace>
        </xacro:unless>
        <controlPeriod>0.001</controlPeriod>
      </plugin>
    </gazebo>
  </xacro:macro>

  <controller_plugin_gazebo />

  <!-- - - - - - - - - - - base_link - - - - - - - - - - -->

  <link name="base_link" />


  <!-- body-->
  <link name="body">
    <visual>
      <origin xyz="0 0 0" />
      <geometry>
        <box size="${body_length} ${body_width} ${body_height}" />
      </geometry>
      <xacro:insert_block name="material_yellow" />
    </visual>
    <collision>
      <origin xyz="0 0 0" />
      <geometry>
        <box size="${body_length} ${body_width} ${body_height}" />
      </geometry>
    </collision>
    <xacro:solid_cuboid_inertial
        length="${body_length}" width="${body_width}"
        height="${body_height}" mass="${body_mass}">
      <origin xyz="0 0 0"/>
    </xacro:solid_cuboid_inertial>
  </link>
  <joint name="body_to_base" type="fixed">
    <origin xyz="0.0 0.0 0.0" />
    <parent link="base_link" />
    <child link="body" />
  </joint>
  <gazebo reference="body">
    <material>Gazebo/Yellow</material>
  </gazebo>


  <!-- bars -->
  <xacro:macro name="bar" params="lr_prefix lr_reflect">
    <link name="${lr_prefix}_bar">
      <visual>
        <origin xyz="0 0 ${bar_length/2}"/>
        <geometry>
          <cylinder length="${bar_length}" radius="${bar_radius}"/>   
        </geometry>
      </visual>
      <collision>
        <geometry>
          <cylinder length="${bar_length}" radius="${bar_radius}"/>   
        </geometry>
      </collision>
      <xacro:thick_walled_tube_inertial
        inner_rad="0.0" outer_rad="${bar_radius}"
        height="${bar_length}" mass="${bar_mass}"/>
    </link>
    <joint name="${lr_prefix}_joint" type="revolute">
      <origin xyz="${body_length/2} ${lr_reflect*body_width/4} 0.0" rpy="0 ${pi/2} 0" />
      <parent link="body" />
      <child link="${lr_prefix}_bar" />
      <axis xyz="0 1 0" />
      <limit lower="0" upper="${pi / 2}" velocity="0.7" effort="1000" />
      <dynamics damping="0.02" friction="0.0" />
    </joint>
  </xacro:macro>

  <xacro:bar lr_prefix="right" lr_reflect="-1"/>  
  <transmission name="right_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_joint">
      <hardwareInterface>hardware_interface/PositionJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_motor">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

  <xacro:bar lr_prefix="left" lr_reflect="1"/>

  <gazebo reference="right_bar">
    <material>Gazebo/Green</material>
  </gazebo>

  <gazebo reference="left_finger">
    <material>Gazebo/Red</material>
  </gazebo>

  <xacro:mimic_joint_plugin_gazebo name_prefix="left_joint"
    parent_joint="right_joint" mimic_joint="left_joint"
    has_pid="true" multiplier="1.0" max_effort="10.0" />

</robot>
